#include <arpa/inet.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <unistd.h>

#define PORT 24919  // Laser server port

int main() {
    int client_fd;
    struct sockaddr_in serv_addr;
    char* command = "scanPush\n";  // Command to get laser data
    char buffer[4096] = {0};

    // Create socket
    if ((client_fd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        printf("Socket creation error\n");
        return -1;
    }

    // Setup server address
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(PORT);

    // Convert address
    if (inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr) <= 0) {
        printf("Invalid address / Address not supported\n");
        return -1;
    }

    // Connect to the server
    if (connect(client_fd, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) < 0) {
        printf("Connection Failed\n");
        return -1;
    }

    // Send scanPush command
    send(client_fd, command, strlen(command), 0);
    printf("Laser scan request sent\n");

    while (1) {
        // Read response
        int valread = read(client_fd, buffer, sizeof(buffer) - 1);
        if (valread <= 0) {
            printf("Connection closed or error\n");
            break;
        }

        buffer[valread] = '\0';  // Null terminate the string
        printf("Received: %s\n", buffer);

        // Parse laser values from XML
        char *token = strstr(buffer, "<laser");  // Find laser tag
        if (token) {
            float laser_values[9] = {0}; // Store extracted values
            int i = 0;
            while ((token = strstr(token, "l")) && i < 9) {
                token = strchr(token, '"');  // Find start of value
                if (!token) break;
                laser_values[i++] = atof(token + 1); // Convert to float
                token++;  // Move forward
            }

            // Print extracted laser values
            printf("Laser Values: ");
            for (int j = 0; j < i; j++) {
                printf("%f ", laser_values[j]);
            }
            printf("\n");
        }
    }

    // Close connection
    close(client_fd);
    return 0;
}
